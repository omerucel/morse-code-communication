package com.omerucel.morse.code.communication;

import com.sun.speech.freetts.Voice;
import com.sun.speech.freetts.VoiceManager;


/**
 * Bu sınıf NetBeans IDE ile istemci arabirimi için otomatik oluşturulmuştur. Bazı
 * metodlarındaki açıklamalar IDE tarafından otomatik eklenmiştir.
 * 
 * Arabirim sayesinde, sunucuya mesaj göndermek ve sunucudan gelen mesajları
 * görüntülemek mümkündür. Gelen mesaj sesli olarak FreeTTS kütüphanesi yardımıyla
 * okunur. Ayrıca gönderilen ve gelen mesajlar MorseCode sınıfı vasıtasıyla
 * dönüştürülür.
 * 
 * @author omer
 */
public class WindowClient extends javax.swing.JFrame {

    // Singleton deseni için WindowClient örneğini tutan değişken.
    private static WindowClient instance;

    // Sunucuya bağlanan istemcinin sunucu ile ilgili işlemlerini yöneten objesi.
    Client client;

    /**
     * WindowClient objesini döner. Eğer obje henüz oluşmamışsa oluşturur.
     * 
     * @return 
     */
    public static WindowClient getInstance()
    {
        if (instance == null)
            instance = new WindowClient();

        return instance;
    }

    /**
     * Creates new form WindowClient
     */
    public WindowClient() {
        initComponents();
    }

    /**
     * Gelen mesajların sesli olarak okunmasını sağlar.
     * 
     * @param line 
     */
    public void speak(String line)
    {
        try
        {
            Voice voice = VoiceManager.getInstance().getVoice("kevin16");
            voice.allocate();
            voice.speak(line);
            voice.deallocate();
        }catch(Exception ex){
            ex.printStackTrace();
        }
    }

    /**
     * Yeni mesaj geldiğinde, Client sınıfı içerisinden bu metod tetiklenir.
     * Mesaj arabirimde görüntülenir ve sesli olarak okunur.
     * 
     * @param line 
     */
    public void receivedLine(String line)
    {
        addLine(line);
        speak(line);
    }

    /**
     * Arabirime yeni bir mesaj satırı ekler.
     * 
     * @param line 
     */
    protected void addLine(String line)
    {
        jTextArea1.setText(jTextArea1.getText() + line + "\n");
    }

    /**
     * Bağlantı işlemi sırasında buton ve textfield alanlarının erişilebilirliğini
     * düzenler.
     * 
     * @param status 
     */
    public void loading(Boolean status)
    {
        jTextField1.setEnabled(!status);
        jButton1.setEnabled(!status);
    }

    /**
     * Client objesini dışarıdan tanımlamak için kullanılır.
     * 
     * @param client 
     */
    public void setClient(Client client)
    {
        this.client = client;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jButton1.setText("Gönder");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 388, Short.MAX_VALUE)
                    .add(layout.createSequentialGroup()
                        .add(jTextField1)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jButton1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 252, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jButton1)
                    .add(jTextField1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        // Gönderilmek istenen metni sunucuya iletir
        client.sendLine(jTextField1.getText());
        // İlgili metni textareaya yazar
        addLine(jTextField1.getText());
        // Metin yazma alanını sıfırlar.
        jTextField1.setText("");
    }//GEN-LAST:event_jButton1ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
